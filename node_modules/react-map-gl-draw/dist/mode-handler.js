"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _reactMapGl = require("react-map-gl");

var React = _interopRequireWildcard(require("react"));

var _editModes = require("@nebula.gl/edit-modes");

var _editingMode = _interopRequireDefault(require("./edit-modes/editing-mode"));

var _utils = require("./edit-modes/utils");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultProps = {
  selectable: true,
  mode: null,
  features: null,
  onSelect: null,
  onUpdate: null,
  onUpdateCursor: function onUpdateCursor() {}
};
var defaultState = {
  featureCollection: new _editModes.ImmutableFeatureCollection({
    type: 'FeatureCollection',
    features: []
  }),
  selectedFeatureIndex: null,
  selectedEditHandleIndexes: [],
  // index, isGuide, mapCoords, screenCoords
  hovered: null,
  isDragging: false,
  didDrag: false,
  lastPointerMoveEvent: null,
  pointerDownPicks: null,
  pointerDownScreenCoords: null,
  pointerDownMapCoords: null
};

var ModeHandler = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(ModeHandler, _React$PureComponent);

  var _super = _createSuper(ModeHandler);

  function ModeHandler(props) {
    var _this;

    _classCallCheck(this, ModeHandler);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "_events", void 0);

    _defineProperty(_assertThisInitialized(_this), "_eventsRegistered", void 0);

    _defineProperty(_assertThisInitialized(_this), "_modeHandler", void 0);

    _defineProperty(_assertThisInitialized(_this), "_context", void 0);

    _defineProperty(_assertThisInitialized(_this), "_containerRef", void 0);

    _defineProperty(_assertThisInitialized(_this), "getFeatures", function () {
      var featureCollection = _this._getFeatureCollection();

      featureCollection = featureCollection && featureCollection.getObject();
      return featureCollection && featureCollection.features;
    });

    _defineProperty(_assertThisInitialized(_this), "addFeatures", function (features) {
      var featureCollection = _this._getFeatureCollection();

      if (featureCollection) {
        if (!Array.isArray(features)) {
          features = [features];
        }

        featureCollection = featureCollection.addFeatures(features);

        _this.setState({
          featureCollection: featureCollection
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "deleteFeatures", function (featureIndexes) {
      var featureCollection = _this._getFeatureCollection();

      var selectedFeatureIndex = _this._getSelectedFeatureIndex();

      if (featureCollection) {
        if (!Array.isArray(featureIndexes)) {
          featureIndexes = [featureIndexes];
        }

        featureCollection = featureCollection.deleteFeatures(featureIndexes);
        var newState = {
          featureCollection: featureCollection
        };

        if (featureIndexes.findIndex(function (index) {
          return selectedFeatureIndex === index;
        }) >= 0) {
          newState.selectedFeatureIndex = null;
          newState.selectedEditHandleIndexes = [];
        }

        _this.setState(newState);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "deleteHandles", function (featureIndex, handleIndexes) {
      var featureCollection = _this._getFeatureCollection();

      if (!featureIndex) {
        featureIndex = _this._getSelectedFeatureIndex();
      }

      if (!handleIndexes) {
        if (!_this.state.selectedEditHandleIndexes.length) {
          return featureCollection;
        }

        handleIndexes = _this.state.selectedEditHandleIndexes;
      }

      var features = featureCollection.getObject().features; // It seems currently only POLYGON and LINE_STRING are supported
      // see handleClick event in editing-mode.ts

      var allowedTypes = [_constants.GEOJSON_TYPE.LINE_STRING, _constants.GEOJSON_TYPE.POLYGON];

      if (featureIndex !== null && features[featureIndex] && allowedTypes.includes(features[featureIndex].geometry.type)) {
        // Remove first indexes in DESC order
        handleIndexes.sort(function (n1, n2) {
          return n2 - n1;
        });
        var positionIndexes;

        if (features[featureIndex].geometry.type === _constants.GEOJSON_TYPE.LINE_STRING) {
          positionIndexes = handleIndexes.map(function (pos) {
            return [pos];
          });
        } else {
          // Currently only spport to handle simple polygons, thus pos 0
          positionIndexes = handleIndexes.map(function (pos) {
            return [0, pos];
          });
        }

        positionIndexes.forEach(function (pos) {
          featureCollection = featureCollection.removePosition(featureIndex, pos);
        });

        var selectedEditHandleIndexes = _this.state.selectedEditHandleIndexes.filter(function (handleIndex) {
          return !handleIndexes.includes(handleIndex);
        });

        _this.setState({
          featureCollection: featureCollection,
          selectedEditHandleIndexes: selectedEditHandleIndexes
        });
      }

      return featureCollection;
    });

    _defineProperty(_assertThisInitialized(_this), "_getMemorizedFeatureCollection", (0, _editModes._memoize)(function (_ref) {
      var propsFeatures = _ref.propsFeatures,
          stateFeatures = _ref.stateFeatures;
      var features = propsFeatures || stateFeatures; // Any changes in ImmutableFeatureCollection will create a new object

      if (features instanceof _editModes.ImmutableFeatureCollection) {
        return features;
      }

      if (features && features.type === 'FeatureCollection') {
        return new _editModes.ImmutableFeatureCollection({
          type: 'FeatureCollection',
          features: features.features
        });
      }

      return new _editModes.ImmutableFeatureCollection({
        type: 'FeatureCollection',
        features: features || []
      });
    }));

    _defineProperty(_assertThisInitialized(_this), "_getFeatureCollection", function () {
      return _this._getMemorizedFeatureCollection({
        propsFeatures: _this.props.features,
        stateFeatures: _this.state.featureCollection
      });
    });

    _defineProperty(_assertThisInitialized(_this), "_setupModeHandler", function () {
      var mode = _this.props.mode;
      _this._modeHandler = mode;

      if (!mode) {
        _this._degregisterEvents();

        return;
      }

      _this._registerEvents();
    });

    _defineProperty(_assertThisInitialized(_this), "_clearEditingState", function () {
      _this.setState({
        selectedFeatureIndex: null,
        selectedEditHandleIndexes: [],
        hovered: null,
        pointerDownPicks: null,
        pointerDownScreenCoords: null,
        pointerDownMapCoords: null,
        isDragging: false,
        didDrag: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "_getSelectedFeatureIndex", function () {
      if ('selectedFeatureIndex' in _this.props) {
        return _this.props.selectedFeatureIndex;
      }

      return _this.state.selectedFeatureIndex;
    });

    _defineProperty(_assertThisInitialized(_this), "_onSelect", function (selected) {
      var selectedFeatureIndex = selected.selectedFeatureIndex;
      var selectedEditHandleIndexes = _this.state.selectedEditHandleIndexes;
      var newState = {
        selectedFeatureIndex: selectedFeatureIndex,
        selectedEditHandleIndexes: selectedEditHandleIndexes
      };

      if (_this.state.selectedFeatureIndex !== selectedFeatureIndex) {
        newState.selectedEditHandleIndexes = [];
      }

      _this.setState(newState);

      if (_this.props.onSelect) {
        _this.props.onSelect(selected);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "_onEdit", function (editAction) {
      var editType = editAction.editType,
          updatedData = editAction.updatedData,
          editContext = editAction.editContext;
      var newState = {
        featureCollection: new _editModes.ImmutableFeatureCollection(updatedData)
      };

      if (editType === _constants.EDIT_TYPE.ADD_POSITION) {
        // @ts-ignore
        newState.selectedEditHandleIndexes = [];
      }

      _this.setState(newState);

      switch (editType) {
        case _constants.EDIT_TYPE.ADD_FEATURE:
          _this._onSelect({
            selectedFeature: null,
            selectedFeatureIndex: null,
            selectedEditHandleIndex: null,
            selectedEditHandleIndexes: [],
            screenCoords: editContext && editContext.screenCoords,
            mapCoords: editContext && editContext.mapCoords
          });

          break;

        default:
      }

      if (_this.props.onUpdate) {
        _this.props.onUpdate({
          data: updatedData && updatedData.features,
          editType: editType,
          editContext: editContext
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "_degregisterEvents", function () {
      var eventManager = _this._context && _this._context.eventManager;

      if (!_this._events || !eventManager) {
        return;
      }

      if (_this._eventsRegistered) {
        eventManager.off(_this._events);
        _this._eventsRegistered = false;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "_registerEvents", function () {
      var ref = _this._containerRef;
      var eventManager = _this._context && _this._context.eventManager;

      if (!_this._events || !ref || !eventManager) {
        return;
      }

      if (_this._eventsRegistered) {
        return;
      }

      eventManager.on(_this._events, ref);
      _this._eventsRegistered = true;
    });

    _defineProperty(_assertThisInitialized(_this), "_onEvent", function (handler, evt, stopPropagation) {
      var event = _this._getEvent(evt);

      handler(event);

      if (stopPropagation) {
        evt.stopImmediatePropagation();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "_onClick", function (event) {
      var modeProps = _this.getModeProps(); // TODO refactor EditingMode
      // @ts-ignore


      if (_this._modeHandler instanceof _editingMode["default"] || _this.props.selectable) {
        var mapCoords = event.mapCoords,
            screenCoords = event.screenCoords;
        var pickedObject = event.picks && event.picks[0];

        var selectedEditHandleIndexes = _toConsumableArray(_this.state.selectedEditHandleIndexes); // @ts-ignore


        if (pickedObject && (0, _utils.isNumeric)(pickedObject.featureIndex)) {
          var handleIndex = // @ts-ignore
          pickedObject.type === _constants.ELEMENT_TYPE.EDIT_HANDLE ? pickedObject.index : null;
          var index = selectedEditHandleIndexes.indexOf(handleIndex);

          if (handleIndex !== null) {
            if (index !== -1) {
              selectedEditHandleIndexes.splice(index, 1);
            } else {
              selectedEditHandleIndexes.push(handleIndex);
            }

            _this.setState({
              selectedEditHandleIndexes: selectedEditHandleIndexes
            });
          } // @ts-ignore


          var selectedFeatureIndex = pickedObject.featureIndex;

          _this._onSelect({
            selectedFeature: pickedObject.object,
            selectedFeatureIndex: selectedFeatureIndex,
            selectedEditHandleIndex: handleIndex,
            selectedEditHandleIndexes: selectedEditHandleIndexes,
            // @ts-ignore
            mapCoords: mapCoords,
            screenCoords: screenCoords
          });
        } else {
          _this._onSelect({
            selectedFeature: null,
            selectedFeatureIndex: null,
            selectedEditHandleIndex: null,
            selectedEditHandleIndexes: selectedEditHandleIndexes,
            // @ts-ignore
            mapCoords: mapCoords,
            screenCoords: screenCoords
          });
        }
      }

      _this._modeHandler.handleClick(event, modeProps);
    });

    _defineProperty(_assertThisInitialized(_this), "_onDblclick", function (event) {
      if ((0, _utils.isNumeric)(_this._getSelectedFeatureIndex())) {
        event.sourceEvent.stopImmediatePropagation();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "_onPointerMove", function (event) {
      // hovering
      var hovered = _this._getHoverState(event);

      var _this$state = _this.state,
          isDragging = _this$state.isDragging,
          didDrag = _this$state.didDrag,
          pointerDownPicks = _this$state.pointerDownPicks,
          pointerDownScreenCoords = _this$state.pointerDownScreenCoords,
          pointerDownMapCoords = _this$state.pointerDownMapCoords;

      if (isDragging && !didDrag && pointerDownScreenCoords) {
        var dx = event.screenCoords[0] - pointerDownScreenCoords[0];
        var dy = event.screenCoords[1] - pointerDownScreenCoords[1];

        if (dx * dx + dy * dy > 5) {
          _this.setState({
            didDrag: true
          });
        }
      }

      var pointerMoveEvent = _objectSpread({}, event, {
        isDragging: isDragging,
        pointerDownPicks: pointerDownPicks,
        pointerDownScreenCoords: pointerDownScreenCoords,
        pointerDownMapCoords: pointerDownMapCoords,
        cancelPan: event.sourceEvent.stopImmediatePropagation
      });

      var modeProps = _this.getModeProps();

      _this._modeHandler.handlePointerMove(pointerMoveEvent, modeProps);

      if (_this.state.didDrag) {
        _this._modeHandler.handleDragging(pointerMoveEvent, modeProps);
      }

      _this.setState({
        hovered: hovered,
        // @ts-ignore
        lastPointerMoveEvent: pointerMoveEvent
      });
    });

    _defineProperty(_assertThisInitialized(_this), "_onPointerDown", function (event) {
      var dragToDraw = _this.props.modeConfig && _this.props.modeConfig.dragToDraw;
      var isDragging = Boolean(event.picks && event.picks[0]) || dragToDraw;

      var startDraggingEvent = _objectSpread({}, event, {
        isDragging: isDragging,
        pointerDownScreenCoords: event.screenCoords,
        pointerDownMapCoords: event.mapCoords,
        cancelPan: event.sourceEvent.stopImmediatePropagation
      });

      var newState = {
        isDragging: isDragging,
        pointerDownPicks: event.picks,
        pointerDownScreenCoords: event.screenCoords,
        pointerDownMapCoords: event.mapCoords
      }; // @ts-ignore

      _this.setState(newState);

      var modeProps = _this.getModeProps();

      _this._modeHandler.handleStartDragging(startDraggingEvent, modeProps);
    });

    _defineProperty(_assertThisInitialized(_this), "_onPointerUp", function (event) {
      var _this$state2 = _this.state,
          didDrag = _this$state2.didDrag,
          pointerDownPicks = _this$state2.pointerDownPicks,
          pointerDownScreenCoords = _this$state2.pointerDownScreenCoords,
          pointerDownMapCoords = _this$state2.pointerDownMapCoords;

      var stopDraggingEvent = _objectSpread({}, event, {
        isDragging: false,
        pointerDownPicks: didDrag ? pointerDownPicks : null,
        pointerDownScreenCoords: didDrag ? pointerDownScreenCoords : null,
        pointerDownMapCoords: didDrag ? pointerDownMapCoords : null,
        cancelPan: event.sourceEvent.cancelPan
      });

      var newState = {
        isDragging: false,
        didDrag: false,
        pointerDownPicks: null,
        pointerDownScreenCoords: null,
        pointerDownMapCoords: null
      };

      _this.setState(newState);

      var modeProps = _this.getModeProps();

      if (didDrag) {
        _this._modeHandler.handleStopDragging(stopDraggingEvent, modeProps);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "_onPan", function (event) {
      var isDragging = _this.state.isDragging;

      if (isDragging) {
        event.sourceEvent.stopImmediatePropagation();
      }

      if (_this._modeHandler.handlePan) {
        _this._modeHandler.handlePan(event, _this.getModeProps());
      }
    });

    _defineProperty(_assertThisInitialized(_this), "project", function (pt) {
      var viewport = _this._context && _this._context.viewport;
      return viewport && viewport.project(pt);
    });

    _defineProperty(_assertThisInitialized(_this), "unproject", function (pt) {
      var viewport = _this._context && _this._context.viewport;
      return viewport && viewport.unproject(pt);
    });

    _defineProperty(_assertThisInitialized(_this), "_getHoverState", function (event) {
      var object = event.picks && event.picks[0];

      if (!object) {
        return null;
      }

      return _objectSpread({
        screenCoords: event.screenCoords,
        mapCoords: event.mapCoords
      }, object);
    });

    _this.state = defaultState;
    _this._eventsRegistered = false;
    _this._events = {
      anyclick: function anyclick(evt) {
        return _this._onEvent(_this._onClick, evt, true);
      },
      dblclick: function dblclick(evt) {
        return _this._onEvent(_this._onDblclick, evt, false);
      },
      click: function click(evt) {
        return evt.stopImmediatePropagation();
      },
      pointermove: function pointermove(evt) {
        return _this._onEvent(_this._onPointerMove, evt, false);
      },
      pointerdown: function pointerdown(evt) {
        return _this._onEvent(_this._onPointerDown, evt, true);
      },
      pointerup: function pointerup(evt) {
        return _this._onEvent(_this._onPointerUp, evt, true);
      },
      panmove: function panmove(evt) {
        return _this._onEvent(_this._onPan, evt, false);
      },
      panstart: function panstart(evt) {
        return _this._onEvent(_this._onPan, evt, false);
      },
      panend: function panend(evt) {
        return _this._onEvent(_this._onPan, evt, false);
      }
    };
    return _this;
  }

  _createClass(ModeHandler, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._setupModeHandler();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.mode !== this.props.mode) {
        this._clearEditingState();

        this._setupModeHandler();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._degregisterEvents();
    }
  }, {
    key: "getModeProps",
    value: function getModeProps() {
      var featureCollection = this._getFeatureCollection();

      var lastPointerMoveEvent = this.state.lastPointerMoveEvent;

      var selectedFeatureIndex = this._getSelectedFeatureIndex();

      var selectedEditHandleIndexes = this.state.selectedEditHandleIndexes;
      var viewport = this._context && this._context.viewport;
      return {
        data: featureCollection && featureCollection.featureCollection,
        selectedIndexes: (0, _utils.isNumeric)(selectedFeatureIndex) ? [selectedFeatureIndex] : [],
        selectedEditHandleIndexes: selectedEditHandleIndexes,
        lastPointerMoveEvent: lastPointerMoveEvent,
        viewport: viewport,
        featuresDraggable: this.props.featuresDraggable,
        onEdit: this._onEdit,
        onUpdateCursor: this.props.onUpdateCursor,
        modeConfig: this.props.modeConfig
      };
    }
    /* MEMORIZERS */

  }, {
    key: "_getEvent",
    value: function _getEvent(evt) {
      var features = this.getFeatures();

      var guides = this._modeHandler.getGuides(this.getModeProps());

      var picked = (0, _utils.parseEventElement)(evt, features, guides && guides.features);
      var screenCoords = (0, _utils.getScreenCoords)(evt); // @ts-ignore

      var mapCoords = this.unproject(screenCoords);
      return {
        picks: picked ? [picked] : null,
        screenCoords: screenCoords,
        mapCoords: mapCoords,
        sourceEvent: evt
      };
    }
  }, {
    key: "_render",
    value: function _render() {
      return /*#__PURE__*/React.createElement("div", null);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement(_reactMapGl._MapContext.Consumer, null, function (context) {
        _this2._context = context;
        var viewport = context && context.viewport;

        if (!viewport || viewport.height <= 0 || viewport.width <= 0) {
          return null;
        }

        return _this2._render();
      });
    }
  }]);

  return ModeHandler;
}(React.PureComponent);

exports["default"] = ModeHandler;

_defineProperty(ModeHandler, "displayName", 'ModeHandler');

_defineProperty(ModeHandler, "defaultProps", defaultProps);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlLWhhbmRsZXIudHN4Il0sIm5hbWVzIjpbImRlZmF1bHRQcm9wcyIsInNlbGVjdGFibGUiLCJtb2RlIiwiZmVhdHVyZXMiLCJvblNlbGVjdCIsIm9uVXBkYXRlIiwib25VcGRhdGVDdXJzb3IiLCJkZWZhdWx0U3RhdGUiLCJmZWF0dXJlQ29sbGVjdGlvbiIsIkltbXV0YWJsZUZlYXR1cmVDb2xsZWN0aW9uIiwidHlwZSIsInNlbGVjdGVkRmVhdHVyZUluZGV4Iiwic2VsZWN0ZWRFZGl0SGFuZGxlSW5kZXhlcyIsImhvdmVyZWQiLCJpc0RyYWdnaW5nIiwiZGlkRHJhZyIsImxhc3RQb2ludGVyTW92ZUV2ZW50IiwicG9pbnRlckRvd25QaWNrcyIsInBvaW50ZXJEb3duU2NyZWVuQ29vcmRzIiwicG9pbnRlckRvd25NYXBDb29yZHMiLCJNb2RlSGFuZGxlciIsInByb3BzIiwiX2dldEZlYXR1cmVDb2xsZWN0aW9uIiwiZ2V0T2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwiYWRkRmVhdHVyZXMiLCJzZXRTdGF0ZSIsImZlYXR1cmVJbmRleGVzIiwiX2dldFNlbGVjdGVkRmVhdHVyZUluZGV4IiwiZGVsZXRlRmVhdHVyZXMiLCJuZXdTdGF0ZSIsImZpbmRJbmRleCIsImluZGV4IiwiZmVhdHVyZUluZGV4IiwiaGFuZGxlSW5kZXhlcyIsInN0YXRlIiwibGVuZ3RoIiwiYWxsb3dlZFR5cGVzIiwiR0VPSlNPTl9UWVBFIiwiTElORV9TVFJJTkciLCJQT0xZR09OIiwiaW5jbHVkZXMiLCJnZW9tZXRyeSIsInNvcnQiLCJuMSIsIm4yIiwicG9zaXRpb25JbmRleGVzIiwibWFwIiwicG9zIiwiZm9yRWFjaCIsInJlbW92ZVBvc2l0aW9uIiwiZmlsdGVyIiwiaGFuZGxlSW5kZXgiLCJwcm9wc0ZlYXR1cmVzIiwic3RhdGVGZWF0dXJlcyIsIl9nZXRNZW1vcml6ZWRGZWF0dXJlQ29sbGVjdGlvbiIsIl9tb2RlSGFuZGxlciIsIl9kZWdyZWdpc3RlckV2ZW50cyIsIl9yZWdpc3RlckV2ZW50cyIsInNlbGVjdGVkIiwiZWRpdEFjdGlvbiIsImVkaXRUeXBlIiwidXBkYXRlZERhdGEiLCJlZGl0Q29udGV4dCIsIkVESVRfVFlQRSIsIkFERF9QT1NJVElPTiIsIkFERF9GRUFUVVJFIiwiX29uU2VsZWN0Iiwic2VsZWN0ZWRGZWF0dXJlIiwic2VsZWN0ZWRFZGl0SGFuZGxlSW5kZXgiLCJzY3JlZW5Db29yZHMiLCJtYXBDb29yZHMiLCJkYXRhIiwiZXZlbnRNYW5hZ2VyIiwiX2NvbnRleHQiLCJfZXZlbnRzIiwiX2V2ZW50c1JlZ2lzdGVyZWQiLCJvZmYiLCJyZWYiLCJfY29udGFpbmVyUmVmIiwib24iLCJoYW5kbGVyIiwiZXZ0Iiwic3RvcFByb3BhZ2F0aW9uIiwiZXZlbnQiLCJfZ2V0RXZlbnQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJtb2RlUHJvcHMiLCJnZXRNb2RlUHJvcHMiLCJFZGl0aW5nTW9kZSIsInBpY2tlZE9iamVjdCIsInBpY2tzIiwiRUxFTUVOVF9UWVBFIiwiRURJVF9IQU5ETEUiLCJpbmRleE9mIiwic3BsaWNlIiwicHVzaCIsIm9iamVjdCIsImhhbmRsZUNsaWNrIiwic291cmNlRXZlbnQiLCJfZ2V0SG92ZXJTdGF0ZSIsImR4IiwiZHkiLCJwb2ludGVyTW92ZUV2ZW50IiwiY2FuY2VsUGFuIiwiaGFuZGxlUG9pbnRlck1vdmUiLCJoYW5kbGVEcmFnZ2luZyIsImRyYWdUb0RyYXciLCJtb2RlQ29uZmlnIiwiQm9vbGVhbiIsInN0YXJ0RHJhZ2dpbmdFdmVudCIsImhhbmRsZVN0YXJ0RHJhZ2dpbmciLCJzdG9wRHJhZ2dpbmdFdmVudCIsImhhbmRsZVN0b3BEcmFnZ2luZyIsImhhbmRsZVBhbiIsInB0Iiwidmlld3BvcnQiLCJwcm9qZWN0IiwidW5wcm9qZWN0IiwiYW55Y2xpY2siLCJfb25FdmVudCIsIl9vbkNsaWNrIiwiZGJsY2xpY2siLCJfb25EYmxjbGljayIsImNsaWNrIiwicG9pbnRlcm1vdmUiLCJfb25Qb2ludGVyTW92ZSIsInBvaW50ZXJkb3duIiwiX29uUG9pbnRlckRvd24iLCJwb2ludGVydXAiLCJfb25Qb2ludGVyVXAiLCJwYW5tb3ZlIiwiX29uUGFuIiwicGFuc3RhcnQiLCJwYW5lbmQiLCJfc2V0dXBNb2RlSGFuZGxlciIsInByZXZQcm9wcyIsIl9jbGVhckVkaXRpbmdTdGF0ZSIsInNlbGVjdGVkSW5kZXhlcyIsImZlYXR1cmVzRHJhZ2dhYmxlIiwib25FZGl0IiwiX29uRWRpdCIsImdldEZlYXR1cmVzIiwiZ3VpZGVzIiwiZ2V0R3VpZGVzIiwicGlja2VkIiwiY29udGV4dCIsImhlaWdodCIsIndpZHRoIiwiX3JlbmRlciIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQVdBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxZQUFZLEdBQUc7QUFDbkJDLEVBQUFBLFVBQVUsRUFBRSxJQURPO0FBRW5CQyxFQUFBQSxJQUFJLEVBQUUsSUFGYTtBQUduQkMsRUFBQUEsUUFBUSxFQUFFLElBSFM7QUFJbkJDLEVBQUFBLFFBQVEsRUFBRSxJQUpTO0FBS25CQyxFQUFBQSxRQUFRLEVBQUUsSUFMUztBQU1uQkMsRUFBQUEsY0FBYyxFQUFFLDBCQUFNLENBQUU7QUFOTCxDQUFyQjtBQVNBLElBQU1DLFlBQVksR0FBRztBQUNuQkMsRUFBQUEsaUJBQWlCLEVBQUUsSUFBSUMscUNBQUosQ0FBK0I7QUFDaERDLElBQUFBLElBQUksRUFBRSxtQkFEMEM7QUFFaERQLElBQUFBLFFBQVEsRUFBRTtBQUZzQyxHQUEvQixDQURBO0FBTW5CUSxFQUFBQSxvQkFBb0IsRUFBRSxJQU5IO0FBT25CQyxFQUFBQSx5QkFBeUIsRUFBRSxFQVBSO0FBU25CO0FBQ0FDLEVBQUFBLE9BQU8sRUFBRSxJQVZVO0FBWW5CQyxFQUFBQSxVQUFVLEVBQUUsS0FaTztBQWFuQkMsRUFBQUEsT0FBTyxF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O0FBQ0QsT0FWSCxDQURGO0FBY0Q7Ozs7RUF6ZnNDQyxLQUFLLENBQUNDLGE7Ozs7Z0JBQTFCcEksVyxpQkFDRSxhOztnQkFERkEsVyxrQkFFR3BCLFkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfTWFwQ29udGV4dCBhcyBNYXBDb250ZXh0LCBNYXBDb250ZXh0UHJvcHMgfSBmcm9tICdyZWFjdC1tYXAtZ2wnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgSW1tdXRhYmxlRmVhdHVyZUNvbGxlY3Rpb24sXG4gIEZlYXR1cmUsXG4gIEZlYXR1cmVDb2xsZWN0aW9uLFxuICBFZGl0QWN0aW9uLFxuICBfbWVtb2l6ZSBhcyBtZW1vaXplLFxufSBmcm9tICdAbmVidWxhLmdsL2VkaXQtbW9kZXMnO1xuXG5pbXBvcnQgeyBNam9sbmlyRXZlbnQgfSBmcm9tICdtam9sbmlyLmpzJztcbmltcG9ydCB7IEJhc2VFdmVudCwgRWRpdG9yUHJvcHMsIEVkaXRvclN0YXRlLCBTZWxlY3RBY3Rpb24gfSBmcm9tICcuL3R5cGVzJztcblxuaW1wb3J0IEVkaXRpbmdNb2RlIGZyb20gJy4vZWRpdC1tb2Rlcy9lZGl0aW5nLW1vZGUnO1xuaW1wb3J0IHsgZ2V0U2NyZWVuQ29vcmRzLCBwYXJzZUV2ZW50RWxlbWVudCwgaXNOdW1lcmljIH0gZnJvbSAnLi9lZGl0LW1vZGVzL3V0aWxzJztcbmltcG9ydCB7IEVESVRfVFlQRSwgRUxFTUVOVF9UWVBFLCBHRU9KU09OX1RZUEUgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgc2VsZWN0YWJsZTogdHJ1ZSxcbiAgbW9kZTogbnVsbCxcbiAgZmVhdHVyZXM6IG51bGwsXG4gIG9uU2VsZWN0OiBudWxsLFxuICBvblVwZGF0ZTogbnVsbCxcbiAgb25VcGRhdGVDdXJzb3I6ICgpID0+IHt9LFxufTtcblxuY29uc3QgZGVmYXVsdFN0YXRlID0ge1xuICBmZWF0dXJlQ29sbGVjdGlvbjogbmV3IEltbXV0YWJsZUZlYXR1cmVDb2xsZWN0aW9uKHtcbiAgICB0eXBlOiAnRmVhdHVyZUNvbGxlY3Rpb24nLFxuICAgIGZlYXR1cmVzOiBbXSxcbiAgfSksXG5cbiAgc2VsZWN0ZWRGZWF0dXJlSW5kZXg6IG51bGwsXG4gIHNlbGVjdGVkRWRpdEhhbmRsZUluZGV4ZXM6IFtdLFxuXG4gIC8vIGluZGV4LCBpc0d1aWRlLCBtYXBDb29yZHMsIHNjcmVlbkNvb3Jkc1xuICBob3ZlcmVkOiBudWxsLFxuXG4gIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICBkaWREcmFnOiBmYWxzZSxcblxuICBsYXN0UG9pbnRlck1vdmVFdmVudDogbnVsbCxcblxuICBwb2ludGVyRG93blBpY2tzOiBudWxsLFxuICBwb2ludGVyRG93blNjcmVlbkNvb3JkczogbnVsbCxcbiAgcG9pbnRlckRvd25NYXBDb29yZHM6IG51bGwsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RlSGFuZGxlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8RWRpdG9yUHJvcHMsIEVkaXRvclN0YXRlPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdNb2RlSGFuZGxlcic7XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IEVkaXRvclByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSBkZWZhdWx0U3RhdGU7XG4gICAgdGhpcy5fZXZlbnRzUmVnaXN0ZXJlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5fZXZlbnRzID0ge1xuICAgICAgYW55Y2xpY2s6IChldnQpID0+IHRoaXMuX29uRXZlbnQodGhpcy5fb25DbGljaywgZXZ0LCB0cnVlKSxcbiAgICAgIGRibGNsaWNrOiAoZXZ0KSA9PiB0aGlzLl9vbkV2ZW50KHRoaXMuX29uRGJsY2xpY2ssIGV2dCwgZmFsc2UpLFxuICAgICAgY2xpY2s6IChldnQpID0+IGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxcbiAgICAgIHBvaW50ZXJtb3ZlOiAoZXZ0KSA9PiB0aGlzLl9vbkV2ZW50KHRoaXMuX29uUG9pbnRlck1vdmUsIGV2dCwgZmFsc2UpLFxuICAgICAgcG9pbnRlcmRvd246IChldnQpID0+IHRoaXMuX29uRXZlbnQodGhpcy5fb25Qb2ludGVyRG93biwgZXZ0LCB0cnVlKSxcbiAgICAgIHBvaW50ZXJ1cDogKGV2dCkgPT4gdGhpcy5fb25FdmVudCh0aGlzLl9vblBvaW50ZXJVcCwgZXZ0LCB0cnVlKSxcbiAgICAgIHBhbm1vdmU6IChldnQpID0+IHRoaXMuX29uRXZlbnQodGhpcy5fb25QYW4sIGV2dCwgZmFsc2UpLFxuICAgICAgcGFuc3RhcnQ6IChldnQpID0+IHRoaXMuX29uRXZlbnQodGhpcy5fb25QYW4sIGV2dCwgZmFsc2UpLFxuICAgICAgcGFuZW5kOiAoZXZ0KSA9PiB0aGlzLl9vbkV2ZW50KHRoaXMuX29uUGFuLCBldnQsIGZhbHNlKSxcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fc2V0dXBNb2RlSGFuZGxlcigpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wczogRWRpdG9yUHJvcHMpIHtcbiAgICBpZiAocHJldlByb3BzLm1vZGUgIT09IHRoaXMucHJvcHMubW9kZSkge1xuICAgICAgdGhpcy5fY2xlYXJFZGl0aW5nU3RhdGUoKTtcbiAgICAgIHRoaXMuX3NldHVwTW9kZUhhbmRsZXIoKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLl9kZWdyZWdpc3RlckV2ZW50cygpO1xuICB9XG5cbiAgX2V2ZW50czogYW55O1xuICBfZXZlbnRzUmVnaXN0ZXJlZDogYm9vbGVhbjtcbiAgX21vZGVIYW5kbGVyOiBhbnk7XG4gIF9jb250ZXh0OiBNYXBDb250ZXh0UHJvcHMgfCBudWxsIHwgdW5kZWZpbmVkO1xuICBfY29udGFpbmVyUmVmOiBIVE1MRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbiAgZ2V0RmVhdHVyZXMgPSAoKSA9PiB7XG4gICAgbGV0IGZlYXR1cmVDb2xsZWN0aW9uID0gdGhpcy5fZ2V0RmVhdHVyZUNvbGxlY3Rpb24oKTtcbiAgICBmZWF0dXJlQ29sbGVjdGlvbiA9IGZlYXR1cmVDb2xsZWN0aW9uICYmIGZlYXR1cmVDb2xsZWN0aW9uLmdldE9iamVjdCgpO1xuICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbiAmJiBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlcztcbiAgfTtcblxuICBhZGRGZWF0dXJlcyA9IChmZWF0dXJlczogRmVhdHVyZSB8IEZlYXR1cmVbXSkgPT4ge1xuICAgIGxldCBmZWF0dXJlQ29sbGVjdGlvbiA9IHRoaXMuX2dldEZlYXR1cmVDb2xsZWN0aW9uKCk7XG4gICAgaWYgKGZlYXR1cmVDb2xsZWN0aW9uKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmVhdHVyZXMpKSB7XG4gICAgICAgIGZlYXR1cmVzID0gW2ZlYXR1cmVzXTtcbiAgICAgIH1cblxuICAgICAgZmVhdHVyZUNvbGxlY3Rpb24gPSBmZWF0dXJlQ29sbGVjdGlvbi5hZGRGZWF0dXJlcyhmZWF0dXJlcyk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZmVhdHVyZUNvbGxlY3Rpb24gfSk7XG4gICAgfVxuICB9O1xuXG4gIGRlbGV0ZUZlYXR1cmVzID0gKGZlYXR1cmVJbmRleGVzOiBudW1iZXIgfCBudW1iZXJbXSkgPT4ge1xuICAgIGxldCBmZWF0dXJlQ29sbGVjdGlvbiA9IHRoaXMuX2dldEZlYXR1cmVDb2xsZWN0aW9uKCk7XG4gICAgY29uc3Qgc2VsZWN0ZWRGZWF0dXJlSW5kZXggPSB0aGlzLl9nZXRTZWxlY3RlZEZlYXR1cmVJbmRleCgpO1xuICAgIGlmIChmZWF0dXJlQ29sbGVjdGlvbikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGZlYXR1cmVJbmRleGVzKSkge1xuICAgICAgICBmZWF0dXJlSW5kZXhlcyA9IFtmZWF0dXJlSW5kZXhlc107XG4gICAgICB9XG4gICAgICBmZWF0dXJlQ29sbGVjdGlvbiA9IGZlYXR1cmVDb2xsZWN0aW9uLmRlbGV0ZUZlYXR1cmVzKGZlYXR1cmVJbmRleGVzKTtcbiAgICAgIGNvbnN0IG5ld1N0YXRlOiBhbnkgPSB7IGZlYXR1cmVDb2xsZWN0aW9uIH07XG4gICAgICBpZiAoZmVhdHVyZUluZGV4ZXMuZmluZEluZGV4KChpbmRleCkgPT4gc2VsZWN0ZWRGZWF0dXJlSW5kZXggPT09IGluZGV4KSA+PSAwKSB7XG4gICAgICAgIG5ld1N0YXRlLnNlbGVjdGVkRmVhdHVyZUluZGV4ID0gbnVsbDtcbiAgICAgICAgbmV3U3RhdGUuc2VsZWN0ZWRFZGl0SGFuZGxlSW5kZXhlcyA9IFtdO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSk7XG4gICAgfVxuICB9O1xuXG4gIGRlbGV0ZUhhbmRsZXMgPSAoXG4gICAgZmVhdHVyZUluZGV4OiBudW1iZXIgfCB1bmRlZmluZWQsXG4gICAgaGFuZGxlSW5kZXhlczogbnVtYmVyW10gfCB1bmRlZmluZWRcbiAgKTogRmVhdHVyZUNvbGxlY3Rpb24gPT4ge1xuICAgIGxldCBmZWF0dXJlQ29sbGVjdGlvbiA9IHRoaXMuX2dldEZlYXR1cmVDb2xsZWN0aW9uKCk7XG4gICAgaWYgKCFmZWF0dXJlSW5kZXgpIHtcbiAgICAgIGZlYXR1cmVJbmRleCA9IHRoaXMuX2dldFNlbGVjdGVkRmVhdHVyZUluZGV4KCk7XG4gICAgfVxuICAgIGlmICghaGFuZGxlSW5kZXhlcykge1xuICAgICAgaWYgKCF0aGlzLnN0YXRlLnNlbGVjdGVkRWRpdEhhbmRsZUluZGV4ZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbjtcbiAgICAgIH1cbiAgICAgIGhhbmRsZUluZGV4ZXMgPSB0aGlzLnN0YXRlLnNlbGVjdGVkRWRpdEhhbmRsZUluZGV4ZXM7XG4gICAgfVxuICAgIGNvbnN0IGZlYXR1cmVzID0gZmVhdHVyZUNvbGxlY3Rpb24uZ2V0T2JqZWN0KCkuZmVhdHVyZXM7XG4gICAgLy8gSXQgc2VlbXMgY3VycmVudGx5IG9ubHkgUE9MWUdPTiBhbmQgTElORV9TVFJJTkcgYXJlIHN1cHBvcnRlZFxuICAgIC8vIHNlZSBoYW5kbGVDbGljayBldmVudCBpbiBlZGl0aW5nLW1vZGUudHNcbiAgICBjb25zdCBhbGxvd2VkVHlwZXMgPSBbR0VPSlNPTl9UWVBFLkxJTkVfU1RSSU5HLCBHRU9KU09OX1RZUEUuUE9MWUdPTl07XG4gICAgaWYgKFxuICAgICAgZmVhdHVyZUluZGV4ICE9PSBudWxsICYmXG4gICAgICBmZWF0dXJlc1tmZWF0dXJlSW5kZXhdICYmXG4gICAgICBhbGxvd2VkVHlwZXMuaW5jbHVkZXMoZmVhdHVyZXNbZmVhdHVyZUluZGV4XS5nZW9tZXRyeS50eXBlKVxuICAgICkge1xuICAgICAgLy8gUmVtb3ZlIGZpcnN0IGluZGV4ZXMgaW4gREVTQyBvcmRlclxuICAgICAgaGFuZGxlSW5kZXhlcy5zb3J0KChuMSwgbjIpID0+IG4yIC0gbjEpO1xuICAgICAgbGV0IHBvc2l0aW9uSW5kZXhlcztcbiAgICAgIGlmIChmZWF0dXJlc1tmZWF0dXJlSW5kZXhdLmdlb21ldHJ5LnR5cGUgPT09IEdFT0pTT05fVFlQRS5MSU5FX1NUUklORykge1xuICAgICAgICBwb3NpdGlvbkluZGV4ZXMgPSBoYW5kbGVJbmRleGVzLm1hcCgocG9zKSA9PiBbcG9zXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDdXJyZW50bHkgb25seSBzcHBvcnQgdG8gaGFuZGxlIHNpbXBsZSBwb2x5Z29ucywgdGh1cyBwb3MgMFxuICAgICAgICBwb3NpdGlvbkluZGV4ZXMgPSBoYW5kbGVJbmRleGVzLm1hcCgocG9zKSA9PiBbMCwgcG9zXSk7XG4gICAgICB9XG4gICAgICBwb3NpdGlvbkluZGV4ZXMuZm9yRWFjaCgocG9zKSA9PiB7XG4gICAgICAgIGZlYXR1cmVDb2xsZWN0aW9uID0gZmVhdHVyZUNvbGxlY3Rpb24ucmVtb3ZlUG9zaXRpb24oZmVhdHVyZUluZGV4LCBwb3MpO1xuICAgICAgfSk7XG4gICAgICBjb25zdCBzZWxlY3RlZEVkaXRIYW5kbGVJbmRleGVzID0gdGhpcy5zdGF0ZS5zZWxlY3RlZEVkaXRIYW5kbGVJbmRleGVzLmZpbHRlcihcbiAgICAgICAgKGhhbmRsZUluZGV4KSA9PiAhaGFuZGxlSW5kZXhlcy5pbmNsdWRlcyhoYW5kbGVJbmRleClcbiAgICAgICk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZmVhdHVyZUNvbGxlY3Rpb24sIHNlbGVjdGVkRWRpdEhhbmRsZUluZGV4ZXMgfSk7XG4gICAgfVxuICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbjtcbiAgfTtcblxuICBnZXRNb2RlUHJvcHMoKSB7XG4gICAgY29uc3QgZmVhdHVyZUNvbGxlY3Rpb24gPSB0aGlzLl9nZXRGZWF0dXJlQ29sbGVjdGlvbigpO1xuXG4gICAgY29uc3QgeyBsYXN0UG9pbnRlck1vdmVFdmVudCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBzZWxlY3RlZEZlYXR1cmVJbmRleCA9IHRoaXMuX2dldFNlbGVjdGVkRmVhdHVyZUluZGV4KCk7XG4gICAgY29uc3Qgc2VsZWN0ZWRFZGl0SGFuZGxlSW5kZXhlcyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRFZGl0SGFuZGxlSW5kZXhlcztcbiAgICBjb25zdCB2aWV3cG9ydCA9IHRoaXMuX2NvbnRleHQgJiYgdGhpcy5fY29udGV4dC52aWV3cG9ydDtcblxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBmZWF0dXJlQ29sbGVjdGlvbiAmJiBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlQ29sbGVjdGlvbixcbiAgICAgIHNlbGVjdGVkSW5kZXhlczogaXNOdW1lcmljKHNlbGVjdGVkRmVhdHVyZUluZGV4KSA/IFtzZWxlY3RlZEZlYXR1cmVJbmRleF0gOiBbXSxcbiAgICAgIHNlbGVjdGVkRWRpdEhhbmRsZUluZGV4ZXMsXG4gICAgICBsYXN0UG9pbnRlck1vdmVFdmVudCxcbiAgICAgIHZpZXdwb3J0LFxuICAgICAgZmVhdHVyZXNEcmFnZ2FibGU6IHRoaXMucHJvcHMuZmVhdHVyZXNEcmFnZ2FibGUsXG4gICAgICBvbkVkaXQ6IHRoaXMuX29uRWRpdCxcbiAgICAgIG9uVXBkYXRlQ3Vyc29yOiB0aGlzLnByb3BzLm9uVXBkYXRlQ3Vyc29yLFxuICAgICAgbW9kZUNvbmZpZzogdGhpcy5wcm9wcy5tb2RlQ29uZmlnLFxuICAgIH07XG4gIH1cblxuICAvKiBNRU1PUklaRVJTICovXG4gIF9nZXRNZW1vcml6ZWRGZWF0dXJlQ29sbGVjdGlvbiA9IG1lbW9pemUoKHsgcHJvcHNGZWF0dXJlcywgc3RhdGVGZWF0dXJlcyB9OiBhbnkpID0+IHtcbiAgICBjb25zdCBmZWF0dXJlcyA9IHByb3BzRmVhdHVyZXMgfHwgc3RhdGVGZWF0dXJlcztcbiAgICAvLyBBbnkgY2hhbmdlcyBpbiBJbW11dGFibGVGZWF0dXJlQ29sbGVjdGlvbiB3aWxsIGNyZWF0ZSBhIG5ldyBvYmplY3RcbiAgICBpZiAoZmVhdHVyZXMgaW5zdGFuY2VvZiBJbW11dGFibGVGZWF0dXJlQ29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGZlYXR1cmVzO1xuICAgIH1cblxuICAgIGlmIChmZWF0dXJlcyAmJiBmZWF0dXJlcy50eXBlID09PSAnRmVhdHVyZUNvbGxlY3Rpb24nKSB7XG4gICAgICByZXR1cm4gbmV3IEltbXV0YWJsZUZlYXR1cmVDb2xsZWN0aW9uKHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgZmVhdHVyZXM6IGZlYXR1cmVzLmZlYXR1cmVzLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBJbW11dGFibGVGZWF0dXJlQ29sbGVjdGlvbih7XG4gICAgICB0eXBlOiAnRmVhdHVyZUNvbGxlY3Rpb24nLFxuICAgICAgZmVhdHVyZXM6IGZlYXR1cmVzIHx8IFtdLFxuICAgIH0pO1xuICB9KTtcblxuICBfZ2V0RmVhdHVyZUNvbGxlY3Rpb24gPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuX2dldE1lbW9yaXplZEZlYXR1cmVDb2xsZWN0aW9uKHtcbiAgICAgIHByb3BzRmVhdHVyZXM6IHRoaXMucHJvcHMuZmVhdHVyZXMsXG4gICAgICBzdGF0ZUZlYXR1cmVzOiB0aGlzLnN0YXRlLmZlYXR1cmVDb2xsZWN0aW9uLFxuICAgIH0pO1xuICB9O1xuXG4gIF9zZXR1cE1vZGVIYW5kbGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IG1vZGUgPSB0aGlzLnByb3BzLm1vZGU7XG4gICAgdGhpcy5fbW9kZUhhbmRsZXIgPSBtb2RlO1xuXG4gICAgaWYgKCFtb2RlKSB7XG4gICAgICB0aGlzLl9kZWdyZWdpc3RlckV2ZW50cygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3JlZ2lzdGVyRXZlbnRzKCk7XG4gIH07XG5cbiAgLyogRURJVElORyBPUEVSQVRJT05TICovXG4gIF9jbGVhckVkaXRpbmdTdGF0ZSA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNlbGVjdGVkRmVhdHVyZUluZGV4OiBudWxsLFxuICAgICAgc2VsZWN0ZWRFZGl0SGFuZGxlSW5kZXhlczogW10sXG5cbiAgICAgIGhvdmVyZWQ6IG51bGwsXG5cbiAgICAgIHBvaW50ZXJEb3duUGlja3M6IG51bGwsXG4gICAgICBwb2ludGVyRG93blNjcmVlbkNvb3JkczogbnVsbCxcbiAgICAgIHBvaW50ZXJEb3duTWFwQ29vcmRzOiBudWxsLFxuXG4gICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgICAgIGRpZERyYWc6IGZhbHNlLFxuICAgIH0pO1xuICB9O1xuXG4gIF9nZXRTZWxlY3RlZEZlYXR1cmVJbmRleCA9ICgpID0+IHtcbiAgICBpZiAoJ3NlbGVjdGVkRmVhdHVyZUluZGV4JyBpbiB0aGlzLnByb3BzKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5zZWxlY3RlZEZlYXR1cmVJbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuc2VsZWN0ZWRGZWF0dXJlSW5kZXg7XG4gIH07XG5cbiAgX29uU2VsZWN0ID0gKHNlbGVjdGVkOiBTZWxlY3RBY3Rpb24pID0+IHtcbiAgICBjb25zdCB7IHNlbGVjdGVkRmVhdHVyZUluZGV4IH0gPSBzZWxlY3RlZDtcbiAgICBjb25zdCB7IHNlbGVjdGVkRWRpdEhhbmRsZUluZGV4ZXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgbmV3U3RhdGUgPSB7IHNlbGVjdGVkRmVhdHVyZUluZGV4LCBzZWxlY3RlZEVkaXRIYW5kbGVJbmRleGVzIH07XG4gICAgaWYgKHRoaXMuc3RhdGUuc2VsZWN0ZWRGZWF0dXJlSW5kZXggIT09IHNlbGVjdGVkRmVhdHVyZUluZGV4KSB7XG4gICAgICBuZXdTdGF0ZS5zZWxlY3RlZEVkaXRIYW5kbGVJbmRleGVzID0gW107XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuICAgIGlmICh0aGlzLnByb3BzLm9uU2VsZWN0KSB7XG4gICAgICB0aGlzLnByb3BzLm9uU2VsZWN0KHNlbGVjdGVkKTtcbiAgICB9XG4gIH07XG5cbiAgX29uRWRpdCA9IChlZGl0QWN0aW9uOiBFZGl0QWN0aW9uPGFueT4pID0+IHtcbiAgICBjb25zdCB7IGVkaXRUeXBlLCB1cGRhdGVkRGF0YSwgZWRpdENvbnRleHQgfSA9IGVkaXRBY3Rpb247XG4gICAgY29uc3QgbmV3U3RhdGUgPSB7IGZlYXR1cmVDb2xsZWN0aW9uOiBuZXcgSW1tdXRhYmxlRmVhdHVyZUNvbGxlY3Rpb24odXBkYXRlZERhdGEpIH07XG4gICAgaWYgKGVkaXRUeXBlID09PSBFRElUX1RZUEUuQUREX1BPU0lUSU9OKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBuZXdTdGF0ZS5zZWxlY3RlZEVkaXRIYW5kbGVJbmRleGVzID0gW107XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuXG4gICAgc3dpdGNoIChlZGl0VHlwZSkge1xuICAgICAgY2FzZSBFRElUX1RZUEUuQUREX0ZFQVRVUkU6XG4gICAgICAgIHRoaXMuX29uU2VsZWN0KHtcbiAgICAgICAgICBzZWxlY3RlZEZlYXR1cmU6IG51bGwsXG4gICAgICAgICAgc2VsZWN0ZWRGZWF0dXJlSW5kZXg6IG51bGwsXG4gICAgICAgICAgc2VsZWN0ZWRFZGl0SGFuZGxlSW5kZXg6IG51bGwsXG4gICAgICAgICAgc2VsZWN0ZWRFZGl0SGFuZGxlSW5kZXhlczogW10sXG4gICAgICAgICAgc2NyZWVuQ29vcmRzOiBlZGl0Q29udGV4dCAmJiBlZGl0Q29udGV4dC5zY3JlZW5Db29yZHMsXG4gICAgICAgICAgbWFwQ29vcmRzOiBlZGl0Q29udGV4dCAmJiBlZGl0Q29udGV4dC5tYXBDb29yZHMsXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHtcbiAgICAgIHRoaXMucHJvcHMub25VcGRhdGUoe1xuICAgICAgICBkYXRhOiB1cGRhdGVkRGF0YSAmJiB1cGRhdGVkRGF0YS5mZWF0dXJlcyxcbiAgICAgICAgZWRpdFR5cGUsXG4gICAgICAgIGVkaXRDb250ZXh0LFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qIEVWRU5UUyAqL1xuICBfZGVncmVnaXN0ZXJFdmVudHMgPSAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRNYW5hZ2VyID0gdGhpcy5fY29udGV4dCAmJiB0aGlzLl9jb250ZXh0LmV2ZW50TWFuYWdlcjtcbiAgICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhZXZlbnRNYW5hZ2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50c1JlZ2lzdGVyZWQpIHtcbiAgICAgIGV2ZW50TWFuYWdlci5vZmYodGhpcy5fZXZlbnRzKTtcbiAgICAgIHRoaXMuX2V2ZW50c1JlZ2lzdGVyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgX3JlZ2lzdGVyRXZlbnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IHJlZiA9IHRoaXMuX2NvbnRhaW5lclJlZjtcbiAgICBjb25zdCBldmVudE1hbmFnZXIgPSB0aGlzLl9jb250ZXh0ICYmIHRoaXMuX2NvbnRleHQuZXZlbnRNYW5hZ2VyO1xuICAgIGlmICghdGhpcy5fZXZlbnRzIHx8ICFyZWYgfHwgIWV2ZW50TWFuYWdlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudHNSZWdpc3RlcmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXZlbnRNYW5hZ2VyLm9uKHRoaXMuX2V2ZW50cywgcmVmKTtcbiAgICB0aGlzLl9ldmVudHNSZWdpc3RlcmVkID0gdHJ1ZTtcbiAgfTtcblxuICBfb25FdmVudCA9IChoYW5kbGVyOiBGdW5jdGlvbiwgZXZ0OiBNam9sbmlyRXZlbnQsIHN0b3BQcm9wYWdhdGlvbjogYm9vbGVhbikgPT4ge1xuICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5fZ2V0RXZlbnQoZXZ0KTtcbiAgICBoYW5kbGVyKGV2ZW50KTtcblxuICAgIGlmIChzdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgIGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgX29uQ2xpY2sgPSAoZXZlbnQ6IEJhc2VFdmVudCkgPT4ge1xuICAgIGNvbnN0IG1vZGVQcm9wcyA9IHRoaXMuZ2V0TW9kZVByb3BzKCk7XG4gICAgLy8gVE9ETyByZWZhY3RvciBFZGl0aW5nTW9kZVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAodGhpcy5fbW9kZUhhbmRsZXIgaW5zdGFuY2VvZiBFZGl0aW5nTW9kZSB8fCB0aGlzLnByb3BzLnNlbGVjdGFibGUpIHtcbiAgICAgIGNvbnN0IHsgbWFwQ29vcmRzLCBzY3JlZW5Db29yZHMgfSA9IGV2ZW50O1xuICAgICAgY29uc3QgcGlja2VkT2JqZWN0ID0gZXZlbnQucGlja3MgJiYgZXZlbnQucGlja3NbMF07XG4gICAgICBjb25zdCBzZWxlY3RlZEVkaXRIYW5kbGVJbmRleGVzID0gWy4uLnRoaXMuc3RhdGUuc2VsZWN0ZWRFZGl0SGFuZGxlSW5kZXhlc107XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpZiAocGlja2VkT2JqZWN0ICYmIGlzTnVtZXJpYyhwaWNrZWRPYmplY3QuZmVhdHVyZUluZGV4KSkge1xuICAgICAgICBjb25zdCBoYW5kbGVJbmRleCA9XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIHBpY2tlZE9iamVjdC50eXBlID09PSBFTEVNRU5UX1RZUEUuRURJVF9IQU5ETEUgPyBwaWNrZWRPYmplY3QuaW5kZXggOiBudWxsO1xuICAgICAgICBjb25zdCBpbmRleCA9IHNlbGVjdGVkRWRpdEhhbmRsZUluZGV4ZXMuaW5kZXhPZihoYW5kbGVJbmRleCk7XG4gICAgICAgIGlmIChoYW5kbGVJbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkRWRpdEhhbmRsZUluZGV4ZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0ZWRFZGl0SGFuZGxlSW5kZXhlcy5wdXNoKGhhbmRsZUluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkRWRpdEhhbmRsZUluZGV4ZXMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCBzZWxlY3RlZEZlYXR1cmVJbmRleCA9IHBpY2tlZE9iamVjdC5mZWF0dXJlSW5kZXg7XG4gICAgICAgIHRoaXMuX29uU2VsZWN0KHtcbiAgICAgICAgICBzZWxlY3RlZEZlYXR1cmU6IHBpY2tlZE9iamVjdC5vYmplY3QsXG4gICAgICAgICAgc2VsZWN0ZWRGZWF0dXJlSW5kZXgsXG4gICAgICAgICAgc2VsZWN0ZWRFZGl0SGFuZGxlSW5kZXg6IGhhbmRsZUluZGV4LFxuICAgICAgICAgIHNlbGVjdGVkRWRpdEhhbmRsZUluZGV4ZXMsXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIG1hcENvb3JkcyxcbiAgICAgICAgICBzY3JlZW5Db29yZHMsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fb25TZWxlY3Qoe1xuICAgICAgICAgIHNlbGVjdGVkRmVhdHVyZTogbnVsbCxcbiAgICAgICAgICBzZWxlY3RlZEZlYXR1cmVJbmRleDogbnVsbCxcbiAgICAgICAgICBzZWxlY3RlZEVkaXRIYW5kbGVJbmRleDogbnVsbCxcbiAgICAgICAgICBzZWxlY3RlZEVkaXRIYW5kbGVJbmRleGVzLFxuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBtYXBDb29yZHMsXG4gICAgICAgICAgc2NyZWVuQ29vcmRzLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9tb2RlSGFuZGxlci5oYW5kbGVDbGljayhldmVudCwgbW9kZVByb3BzKTtcbiAgfTtcblxuICBfb25EYmxjbGljayA9IChldmVudDogQmFzZUV2ZW50KSA9PiB7XG4gICAgaWYgKGlzTnVtZXJpYyh0aGlzLl9nZXRTZWxlY3RlZEZlYXR1cmVJbmRleCgpKSkge1xuICAgICAgZXZlbnQuc291cmNlRXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9vblBvaW50ZXJNb3ZlID0gKGV2ZW50OiBCYXNlRXZlbnQpID0+IHtcbiAgICAvLyBob3ZlcmluZ1xuICAgIGNvbnN0IGhvdmVyZWQgPSB0aGlzLl9nZXRIb3ZlclN0YXRlKGV2ZW50KTtcbiAgICBjb25zdCB7XG4gICAgICBpc0RyYWdnaW5nLFxuICAgICAgZGlkRHJhZyxcbiAgICAgIHBvaW50ZXJEb3duUGlja3MsXG4gICAgICBwb2ludGVyRG93blNjcmVlbkNvb3JkcyxcbiAgICAgIHBvaW50ZXJEb3duTWFwQ29vcmRzLFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKGlzRHJhZ2dpbmcgJiYgIWRpZERyYWcgJiYgcG9pbnRlckRvd25TY3JlZW5Db29yZHMpIHtcbiAgICAgIGNvbnN0IGR4ID0gZXZlbnQuc2NyZWVuQ29vcmRzWzBdIC0gcG9pbnRlckRvd25TY3JlZW5Db29yZHNbMF07XG4gICAgICBjb25zdCBkeSA9IGV2ZW50LnNjcmVlbkNvb3Jkc1sxXSAtIHBvaW50ZXJEb3duU2NyZWVuQ29vcmRzWzFdO1xuICAgICAgaWYgKGR4ICogZHggKyBkeSAqIGR5ID4gNSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZGlkRHJhZzogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwb2ludGVyTW92ZUV2ZW50ID0ge1xuICAgICAgLi4uZXZlbnQsXG4gICAgICBpc0RyYWdnaW5nLFxuICAgICAgcG9pbnRlckRvd25QaWNrcyxcbiAgICAgIHBvaW50ZXJEb3duU2NyZWVuQ29vcmRzLFxuICAgICAgcG9pbnRlckRvd25NYXBDb29yZHMsXG4gICAgICBjYW5jZWxQYW46IGV2ZW50LnNvdXJjZUV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbixcbiAgICB9O1xuXG4gICAgY29uc3QgbW9kZVByb3BzID0gdGhpcy5nZXRNb2RlUHJvcHMoKTtcblxuICAgIHRoaXMuX21vZGVIYW5kbGVyLmhhbmRsZVBvaW50ZXJNb3ZlKHBvaW50ZXJNb3ZlRXZlbnQsIG1vZGVQcm9wcyk7XG4gICAgaWYgKHRoaXMuc3RhdGUuZGlkRHJhZykge1xuICAgICAgdGhpcy5fbW9kZUhhbmRsZXIuaGFuZGxlRHJhZ2dpbmcocG9pbnRlck1vdmVFdmVudCwgbW9kZVByb3BzKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGhvdmVyZWQsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBsYXN0UG9pbnRlck1vdmVFdmVudDogcG9pbnRlck1vdmVFdmVudCxcbiAgICB9KTtcbiAgfTtcblxuICBfb25Qb2ludGVyRG93biA9IChldmVudDogQmFzZUV2ZW50KSA9PiB7XG4gICAgY29uc3QgZHJhZ1RvRHJhdyA9IHRoaXMucHJvcHMubW9kZUNvbmZpZyAmJiB0aGlzLnByb3BzLm1vZGVDb25maWcuZHJhZ1RvRHJhdztcbiAgICBjb25zdCBpc0RyYWdnaW5nID0gQm9vbGVhbihldmVudC5waWNrcyAmJiBldmVudC5waWNrc1swXSkgfHwgZHJhZ1RvRHJhdztcbiAgICBjb25zdCBzdGFydERyYWdnaW5nRXZlbnQgPSB7XG4gICAgICAuLi5ldmVudCxcbiAgICAgIGlzRHJhZ2dpbmcsXG4gICAgICBwb2ludGVyRG93blNjcmVlbkNvb3JkczogZXZlbnQuc2NyZWVuQ29vcmRzLFxuICAgICAgcG9pbnRlckRvd25NYXBDb29yZHM6IGV2ZW50Lm1hcENvb3JkcyxcbiAgICAgIGNhbmNlbFBhbjogZXZlbnQuc291cmNlRXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uLFxuICAgIH07XG5cbiAgICBjb25zdCBuZXdTdGF0ZSA9IHtcbiAgICAgIGlzRHJhZ2dpbmcsXG4gICAgICBwb2ludGVyRG93blBpY2tzOiBldmVudC5waWNrcyxcbiAgICAgIHBvaW50ZXJEb3duU2NyZWVuQ29vcmRzOiBldmVudC5zY3JlZW5Db29yZHMsXG4gICAgICBwb2ludGVyRG93bk1hcENvb3JkczogZXZlbnQubWFwQ29vcmRzLFxuICAgIH07XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuXG4gICAgY29uc3QgbW9kZVByb3BzID0gdGhpcy5nZXRNb2RlUHJvcHMoKTtcbiAgICB0aGlzLl9tb2RlSGFuZGxlci5oYW5kbGVTdGFydERyYWdnaW5nKHN0YXJ0RHJhZ2dpbmdFdmVudCwgbW9kZVByb3BzKTtcbiAgfTtcblxuICBfb25Qb2ludGVyVXAgPSAoZXZlbnQ6IEJhc2VFdmVudCkgPT4ge1xuICAgIGNvbnN0IHsgZGlkRHJhZywgcG9pbnRlckRvd25QaWNrcywgcG9pbnRlckRvd25TY3JlZW5Db29yZHMsIHBvaW50ZXJEb3duTWFwQ29vcmRzIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHN0b3BEcmFnZ2luZ0V2ZW50ID0ge1xuICAgICAgLi4uZXZlbnQsXG4gICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgICAgIHBvaW50ZXJEb3duUGlja3M6IGRpZERyYWcgPyBwb2ludGVyRG93blBpY2tzIDogbnVsbCxcbiAgICAgIHBvaW50ZXJEb3duU2NyZWVuQ29vcmRzOiBkaWREcmFnID8gcG9pbnRlckRvd25TY3JlZW5Db29yZHMgOiBudWxsLFxuICAgICAgcG9pbnRlckRvd25NYXBDb29yZHM6IGRpZERyYWcgPyBwb2ludGVyRG93bk1hcENvb3JkcyA6IG51bGwsXG4gICAgICBjYW5jZWxQYW46IGV2ZW50LnNvdXJjZUV2ZW50LmNhbmNlbFBhbixcbiAgICB9O1xuXG4gICAgY29uc3QgbmV3U3RhdGUgPSB7XG4gICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgICAgIGRpZERyYWc6IGZhbHNlLFxuICAgICAgcG9pbnRlckRvd25QaWNrczogbnVsbCxcbiAgICAgIHBvaW50ZXJEb3duU2NyZWVuQ29vcmRzOiBudWxsLFxuICAgICAgcG9pbnRlckRvd25NYXBDb29yZHM6IG51bGwsXG4gICAgfTtcblxuICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuICAgIGNvbnN0IG1vZGVQcm9wcyA9IHRoaXMuZ2V0TW9kZVByb3BzKCk7XG5cbiAgICBpZiAoZGlkRHJhZykge1xuICAgICAgdGhpcy5fbW9kZUhhbmRsZXIuaGFuZGxlU3RvcERyYWdnaW5nKHN0b3BEcmFnZ2luZ0V2ZW50LCBtb2RlUHJvcHMpO1xuICAgIH1cbiAgfTtcblxuICBfb25QYW4gPSAoZXZlbnQ6IEJhc2VFdmVudCkgPT4ge1xuICAgIGNvbnN0IHsgaXNEcmFnZ2luZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoaXNEcmFnZ2luZykge1xuICAgICAgZXZlbnQuc291cmNlRXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9tb2RlSGFuZGxlci5oYW5kbGVQYW4pIHtcbiAgICAgIHRoaXMuX21vZGVIYW5kbGVyLmhhbmRsZVBhbihldmVudCwgdGhpcy5nZXRNb2RlUHJvcHMoKSk7XG4gICAgfVxuICB9O1xuXG4gIC8qIEhFTFBFUlMgKi9cbiAgcHJvamVjdCA9IChwdDogW251bWJlciwgbnVtYmVyXSkgPT4ge1xuICAgIGNvbnN0IHZpZXdwb3J0ID0gdGhpcy5fY29udGV4dCAmJiB0aGlzLl9jb250ZXh0LnZpZXdwb3J0O1xuICAgIHJldHVybiB2aWV3cG9ydCAmJiB2aWV3cG9ydC5wcm9qZWN0KHB0KTtcbiAgfTtcblxuICB1bnByb2plY3QgPSAocHQ6IFtudW1iZXIsIG51bWJlcl0pID0+IHtcbiAgICBjb25zdCB2aWV3cG9ydCA9IHRoaXMuX2NvbnRleHQgJiYgdGhpcy5fY29udGV4dC52aWV3cG9ydDtcbiAgICByZXR1cm4gdmlld3BvcnQgJiYgdmlld3BvcnQudW5wcm9qZWN0KHB0KTtcbiAgfTtcblxuICBfZ2V0RXZlbnQoZXZ0OiBNam9sbmlyRXZlbnQpIHtcbiAgICBjb25zdCBmZWF0dXJlcyA9IHRoaXMuZ2V0RmVhdHVyZXMoKTtcbiAgICBjb25zdCBndWlkZXMgPSB0aGlzLl9tb2RlSGFuZGxlci5nZXRHdWlkZXModGhpcy5nZXRNb2RlUHJvcHMoKSk7XG4gICAgY29uc3QgcGlja2VkID0gcGFyc2VFdmVudEVsZW1lbnQoZXZ0LCBmZWF0dXJlcywgZ3VpZGVzICYmIGd1aWRlcy5mZWF0dXJlcyk7XG4gICAgY29uc3Qgc2NyZWVuQ29vcmRzID0gZ2V0U2NyZWVuQ29vcmRzKGV2dCk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IG1hcENvb3JkcyA9IHRoaXMudW5wcm9qZWN0KHNjcmVlbkNvb3Jkcyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGlja3M6IHBpY2tlZCA/IFtwaWNrZWRdIDogbnVsbCxcbiAgICAgIHNjcmVlbkNvb3JkcyxcbiAgICAgIG1hcENvb3JkcyxcbiAgICAgIHNvdXJjZUV2ZW50OiBldnQsXG4gICAgfTtcbiAgfVxuXG4gIF9nZXRIb3ZlclN0YXRlID0gKGV2ZW50OiBCYXNlRXZlbnQpID0+IHtcbiAgICBjb25zdCBvYmplY3QgPSBldmVudC5waWNrcyAmJiBldmVudC5waWNrc1swXTtcbiAgICBpZiAoIW9iamVjdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNjcmVlbkNvb3JkczogZXZlbnQuc2NyZWVuQ29vcmRzLFxuICAgICAgbWFwQ29vcmRzOiBldmVudC5tYXBDb29yZHMsXG4gICAgICAuLi5vYmplY3QsXG4gICAgfTtcbiAgfTtcblxuICBfcmVuZGVyKCkge1xuICAgIHJldHVybiA8ZGl2IC8+O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TWFwQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAgeyhjb250ZXh0KSA9PiB7XG4gICAgICAgICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgICAgY29uc3Qgdmlld3BvcnQgPSBjb250ZXh0ICYmIGNvbnRleHQudmlld3BvcnQ7XG5cbiAgICAgICAgICBpZiAoIXZpZXdwb3J0IHx8IHZpZXdwb3J0LmhlaWdodCA8PSAwIHx8IHZpZXdwb3J0LndpZHRoIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXIoKTtcbiAgICAgICAgfX1cbiAgICAgIDwvTWFwQ29udGV4dC5Db25zdW1lcj5cbiAgICApO1xuICB9XG59XG4iXX0=